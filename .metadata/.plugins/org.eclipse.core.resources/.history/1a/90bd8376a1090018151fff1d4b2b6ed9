package com.internousdev.ecsite.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import com.internousdev.ecsite.dto.SalesInfoDTO;
import com.internousdev.ecsite.util.DBConnector;

public class SalesInfoDAO {
	private DBConnector dbConnector = new DBConnector();
	private Connection connection = dbConnector.getConnection();

	public ArrayList<SalesInfoDTO> getSalesInfo(
			String buy_date_start,String buy_date_end) throws SQLException{
		//buy_date_startからbuy_date_endの期間かつ、商品ID=product_idのリストを表示
		//asc_descで昇順か降順を指定可能

		ArrayList<SalesInfoDTO> salesInfoDTO = new ArrayList<SalesInfoDTO>();
		String sql ="SELECT IFNULL(購入日,'total')as 購入日,IFNULL(ID,'ALL')as ID,IFNULL(商品名,'ALL')as 商品名,個数,売上高,原価,利益 "
					+ "FROM "
						+ "(SELECT CAST(u.regist_date as date) as 購入日,u.product_id as ID,i.product_name as 商品名,sum(u.product_count) as 個数,sum(u.buy_total_price) as 売上高,sum(u.genka_total_price) as 原価,sum(u.rieki) as 利益 "
							+ "FROM user_buy_item_transaction as u LEFT JOIN item_info_transaction as i "
								+ "ON u.product_id = i.product_id "
								+ "WHERE u.regist_date >= ? AND u.regist_date <= ? "
								+ "GROUP BY ID,商品名 ,購入日 with rollup)as bit "
									+ "WHERE 商品名 is not null OR ID is null;"
					;

		try{
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, buy_date_start);
			preparedStatement.setString(2, buy_date_end);

			ResultSet resultSet = preparedStatement.executeQuery();

			while(resultSet.next()) {
				SalesInfoDTO dto = new SalesInfoDTO();
				dto.setRegist_date(resultSet.getString("regist_date"));
				dto.setProduct_id(resultSet.getString("product_id"));
				dto.setProduct_name(resultSet.getString("product_name"));
				dto.setProduct_count(resultSet.getString("product_count"));
				dto.setBuy_total_price(resultSet.getString("buy_total_price"));
				dto.setGenka_total_price(resultSet.getString("genka_total_price"));
				dto.setRieki(resultSet.getString("rieki"));
				salesInfoDTO.add(dto);
			}
	} catch(Exception e) {
		e.printStackTrace();
	} finally {
		connection.close();
	}
		return salesInfoDTO;
	}
}
